
variables:

  ### Disable cache in Docker builds, as this has occasionally resulted in images not containing what was
  ### expected multiple MRs where being built/retried.
  NO_CACHE: 'true'
  ### Replace RESOURCE with the name of the image you want to build and publish in OpenShift
  ### Important! In order for this template to work, the name of the gitlab repo must match
  ### also the variable name
  RESOURCE: cern-search-rest-api
  ### OpenShift namespace and server values
  NAMESPACE_DEV: cern-search-master
  OPENSHIFT_SERVER_DEV: https://openshift.cern.ch
  NAMESPACE_PROD: cern-search-master
  OPENSHIFT_SERVER_PROD: https://openshift.cern.ch


### By default, there are 6 stages that we may use:
### Feel free to adapt this to your specific case.
stages:
  - build_base
  - build
  - tag_image
  - import_image # This stage is only used when the built image is stored in the GitLab Registry
  - deploy

### 'Build Base' stage
### Builds the base docker image and tags it according to the commit message.
build_base_image:
  stage: build_base
  only:
    changes:
      - Dockerfile-base
      - Pipfile
      - Pipfile.lock
  tags:
    - docker-image-build
  script: 'echo "Building base Docker image..."'
  variables:
    DOCKER_FILE: Dockerfile-base
    TO: gitlab-registry.cern.ch/webservices/cern-search/cern-search-rest-api/cern-search-rest-api-base:${CI_COMMIT_SHA}

### 'Build' stage
### Build the image and store it in the registry. It is important that this step
### doesn't override the image the applications are running, as we haven't tested the image yet
########## DEV ##########
build_dev_version:
  stage: build
  except:
    refs:
      - tags
      - master
    changes:
      - Dockerfile-base
      - Pipfile
      - Pipfile.lock
  environment: staging
  tags:
    - docker-image-build
  script: 'echo "Building Dev/QA Docker image..."'
  variables:
    BUILD_ARG: build_env=dev

########## PROD ##########
build_prod_version:
  stage: build
  only:
    - master
  environment: master
  tags:
    - docker-image-build
  script: 'echo "Building Prod Docker image..."'
  variables:
    BUILD_ARG: build_env=prod

########## ALL ##########
### When building tags, use the git tag as the docker tag of the image
build_tagged_version:
  stage: build
  only:
    - tags
  tags:
    - docker-image-build
  script: 'echo "Building Docker image..."'
  variables:
    TO: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}

########## DEV ##########
### If a new tag is pushed it needs to be referenced into the ImageStream
tag_image_dev: &tag_image_openshift
  stage: tag_image
  only:
  - tags
  environment: staging
  image: gitlab-registry.cern.ch/paas-tools/openshift-client:latest
  script:
    - oc tag --source=docker ${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG} ${RESOURCE}:${CI_COMMIT_TAG} --token=${TOKEN} --server=${OPENSHIFT_SERVER} -n ${NAMESPACE}
  variables:
    TOKEN: ${SERVICE_ACCOUNT_TOKEN_PROD}
    NAMESPACE: ${NAMESPACE_DEV}
    OPENSHIFT_SERVER: ${OPENSHIFT_SERVER_DEV}

########## PROD ##########
### If a new tag is pushed it needs to be referenced into the ImageStream
tag_image_prod:
  <<: *tag_image_openshift
  variables:
    TOKEN: ${SERVICE_ACCOUNT_TOKEN_PROD}
    NAMESPACE: ${NAMESPACE_PROD}
    OPENSHIFT_SERVER: ${OPENSHIFT_SERVER_PROD}

########## DEV ##########
### Import image into OpenShift. Import $CI_COMMIT_TAG if present or 'latest' if not.
import_image_dev:
  stage: import_image
  except:
    changes:
      - Dockerfile\-base
      - Pipfile
      - Pipfile.lock
  environment: staging
  image: gitlab-registry.cern.ch/paas-tools/openshift-client:latest
  script:
    - oc import-image ${RESOURCE}:${CI_COMMIT_TAG:-latest} --token=${TOKEN} --server=${OPENSHIFT_SERVER} -n ${NAMESPACE}
  variables:
    TOKEN: ${SERVICE_ACCOUNT_TOKEN_PROD}
    OPENSHIFT_SERVER: ${OPENSHIFT_SERVER_DEV}
    NAMESPACE: ${NAMESPACE_DEV}

########## PROD ##########
### Import image into OpenShift. Import $CI_COMMIT_TAG if present or 'latest' if not.
import_image_prod:
  stage: import_image
  environment: master
  only:
  - tags
  image: gitlab-registry.cern.ch/paas-tools/openshift-client:latest
  script:
    - oc import-image ${RESOURCE}:${CI_COMMIT_TAG:-latest} --token=${TOKEN} --server=${OPENSHIFT_SERVER} -n ${NAMESPACE}
  variables:
    TOKEN: ${SERVICE_ACCOUNT_TOKEN_PROD}
    OPENSHIFT_SERVER: ${OPENSHIFT_SERVER_PROD}
    NAMESPACE: ${NAMESPACE_PROD}

########## PROD ##########
deploy_production:
  stage: deploy
  environment: production
  only:
  - tags
  when: manual
  image: gitlab-registry.cern.ch/paas-tools/openshift-client:latest
  script:
    - oc --token=${TOKEN} --server=${OPENSHIFT_SERVER} -n ${NAMESPACE} tag ${RESOURCE}:${CI_COMMIT_TAG} ${RESOURCE}:stable
  variables:
    TOKEN: ${SERVICE_ACCOUNT_TOKEN_PROD}
    OPENSHIFT_SERVER: ${OPENSHIFT_SERVER_PROD}
    NAMESPACE: ${NAMESPACE_PROD}
    GIT_STRATEGY: none
